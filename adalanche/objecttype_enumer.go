// Code generated by "enumer -type=ObjectType -trimprefix=ObjectType -json"; DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ObjectTypeName = "OtherAttributeSchemaGroupForeignSecurityPrincipalUserComputerManagedServiceAccountOrganizationalUnitContainerGroupPolicyContainerCertificateTemplateTrust"

var _ObjectTypeIndex = [...]uint8{0, 5, 20, 25, 49, 53, 61, 82, 100, 109, 129, 148, 153}

const _ObjectTypeLowerName = "otherattributeschemagroupforeignsecurityprincipalusercomputermanagedserviceaccountorganizationalunitcontainergrouppolicycontainercertificatetemplatetrust"

func (i ObjectType) String() string {
	i -= 1
	if i >= ObjectType(len(_ObjectTypeIndex)-1) {
		return fmt.Sprintf("ObjectType(%d)", i+1)
	}
	return _ObjectTypeName[_ObjectTypeIndex[i]:_ObjectTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ObjectTypeNoOp() {
	var x [1]struct{}
	_ = x[ObjectTypeOther-(1)]
	_ = x[ObjectTypeAttributeSchema-(2)]
	_ = x[ObjectTypeGroup-(3)]
	_ = x[ObjectTypeForeignSecurityPrincipal-(4)]
	_ = x[ObjectTypeUser-(5)]
	_ = x[ObjectTypeComputer-(6)]
	_ = x[ObjectTypeManagedServiceAccount-(7)]
	_ = x[ObjectTypeOrganizationalUnit-(8)]
	_ = x[ObjectTypeContainer-(9)]
	_ = x[ObjectTypeGroupPolicyContainer-(10)]
	_ = x[ObjectTypeCertificateTemplate-(11)]
	_ = x[ObjectTypeTrust-(12)]
}

var _ObjectTypeValues = []ObjectType{ObjectTypeOther, ObjectTypeAttributeSchema, ObjectTypeGroup, ObjectTypeForeignSecurityPrincipal, ObjectTypeUser, ObjectTypeComputer, ObjectTypeManagedServiceAccount, ObjectTypeOrganizationalUnit, ObjectTypeContainer, ObjectTypeGroupPolicyContainer, ObjectTypeCertificateTemplate, ObjectTypeTrust}

var _ObjectTypeNameToValueMap = map[string]ObjectType{
	_ObjectTypeName[0:5]:          ObjectTypeOther,
	_ObjectTypeLowerName[0:5]:     ObjectTypeOther,
	_ObjectTypeName[5:20]:         ObjectTypeAttributeSchema,
	_ObjectTypeLowerName[5:20]:    ObjectTypeAttributeSchema,
	_ObjectTypeName[20:25]:        ObjectTypeGroup,
	_ObjectTypeLowerName[20:25]:   ObjectTypeGroup,
	_ObjectTypeName[25:49]:        ObjectTypeForeignSecurityPrincipal,
	_ObjectTypeLowerName[25:49]:   ObjectTypeForeignSecurityPrincipal,
	_ObjectTypeName[49:53]:        ObjectTypeUser,
	_ObjectTypeLowerName[49:53]:   ObjectTypeUser,
	_ObjectTypeName[53:61]:        ObjectTypeComputer,
	_ObjectTypeLowerName[53:61]:   ObjectTypeComputer,
	_ObjectTypeName[61:82]:        ObjectTypeManagedServiceAccount,
	_ObjectTypeLowerName[61:82]:   ObjectTypeManagedServiceAccount,
	_ObjectTypeName[82:100]:       ObjectTypeOrganizationalUnit,
	_ObjectTypeLowerName[82:100]:  ObjectTypeOrganizationalUnit,
	_ObjectTypeName[100:109]:      ObjectTypeContainer,
	_ObjectTypeLowerName[100:109]: ObjectTypeContainer,
	_ObjectTypeName[109:129]:      ObjectTypeGroupPolicyContainer,
	_ObjectTypeLowerName[109:129]: ObjectTypeGroupPolicyContainer,
	_ObjectTypeName[129:148]:      ObjectTypeCertificateTemplate,
	_ObjectTypeLowerName[129:148]: ObjectTypeCertificateTemplate,
	_ObjectTypeName[148:153]:      ObjectTypeTrust,
	_ObjectTypeLowerName[148:153]: ObjectTypeTrust,
}

var _ObjectTypeNames = []string{
	_ObjectTypeName[0:5],
	_ObjectTypeName[5:20],
	_ObjectTypeName[20:25],
	_ObjectTypeName[25:49],
	_ObjectTypeName[49:53],
	_ObjectTypeName[53:61],
	_ObjectTypeName[61:82],
	_ObjectTypeName[82:100],
	_ObjectTypeName[100:109],
	_ObjectTypeName[109:129],
	_ObjectTypeName[129:148],
	_ObjectTypeName[148:153],
}

// ObjectTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ObjectTypeString(s string) (ObjectType, error) {
	if val, ok := _ObjectTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ObjectTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ObjectType values", s)
}

// ObjectTypeValues returns all values of the enum
func ObjectTypeValues() []ObjectType {
	return _ObjectTypeValues
}

// ObjectTypeStrings returns a slice of all String values of the enum
func ObjectTypeStrings() []string {
	strs := make([]string, len(_ObjectTypeNames))
	copy(strs, _ObjectTypeNames)
	return strs
}

// IsAObjectType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ObjectType) IsAObjectType() bool {
	for _, v := range _ObjectTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ObjectType
func (i ObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ObjectType
func (i *ObjectType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ObjectType should be a string, got %s", data)
	}

	var err error
	*i, err = ObjectTypeString(s)
	return err
}
