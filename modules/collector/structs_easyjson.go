// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package collector

import (
	json "encoding/json"
	shared "github.com/lkarlslund/go-win64api/shared"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	net "net"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "SID":
			out.SID = string(in.String())
		case "FullName":
			out.FullName = string(in.String())
		case "IsEnabled":
			out.IsEnabled = bool(in.Bool())
		case "IsLocked":
			out.IsLocked = bool(in.Bool())
		case "IsAdmin":
			out.IsAdmin = bool(in.Bool())
		case "PasswordNeverExpires":
			out.PasswordNeverExpires = bool(in.Bool())
		case "NoChangePassword":
			out.NoChangePassword = bool(in.Bool())
		case "PasswordLastSet":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PasswordLastSet).UnmarshalJSON(data))
			}
		case "LastLogon":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastLogon).UnmarshalJSON(data))
			}
		case "LastLogoff":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastLogoff).UnmarshalJSON(data))
			}
		case "BadPasswordCount":
			out.BadPasswordCount = int(in.Int())
		case "NumberOfLogins":
			out.NumberOfLogins = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"SID\":"
		out.RawString(prefix)
		out.String(string(in.SID))
	}
	{
		const prefix string = ",\"FullName\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"IsEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsEnabled))
	}
	{
		const prefix string = ",\"IsLocked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLocked))
	}
	{
		const prefix string = ",\"IsAdmin\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdmin))
	}
	{
		const prefix string = ",\"PasswordNeverExpires\":"
		out.RawString(prefix)
		out.Bool(bool(in.PasswordNeverExpires))
	}
	{
		const prefix string = ",\"NoChangePassword\":"
		out.RawString(prefix)
		out.Bool(bool(in.NoChangePassword))
	}
	{
		const prefix string = ",\"PasswordLastSet\":"
		out.RawString(prefix)
		out.Raw((in.PasswordLastSet).MarshalJSON())
	}
	{
		const prefix string = ",\"LastLogon\":"
		out.RawString(prefix)
		out.Raw((in.LastLogon).MarshalJSON())
	}
	{
		const prefix string = ",\"LastLogoff\":"
		out.RawString(prefix)
		out.Raw((in.LastLogoff).MarshalJSON())
	}
	{
		const prefix string = ",\"BadPasswordCount\":"
		out.RawString(prefix)
		out.Int(int(in.BadPasswordCount))
	}
	{
		const prefix string = ",\"NumberOfLogins\":"
		out.RawString(prefix)
		out.Int(int(in.NumberOfLogins))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector1(in *jlexer.Lexer, out *Share) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "Remark":
			out.Remark = string(in.String())
		case "Permissions":
			out.Permissions = int(in.Int())
		case "Type":
			out.Type = int(in.Int())
		case "DACL":
			if in.IsNull() {
				in.Skip()
				out.DACL = nil
			} else {
				out.DACL = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector1(out *jwriter.Writer, in Share) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Path != "" {
		const prefix string = ",\"Path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if in.Remark != "" {
		const prefix string = ",\"Remark\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Remark))
	}
	if in.Permissions != 0 {
		const prefix string = ",\"Permissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permissions))
	}
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if len(in.DACL) != 0 {
		const prefix string = ",\"DACL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.DACL)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Share) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Share) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Share) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Share) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector1(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector2(in *jlexer.Lexer, out *Service) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RegistryDACL":
			if in.IsNull() {
				in.Skip()
				out.RegistryDACL = nil
			} else {
				out.RegistryDACL = in.Bytes()
			}
		case "Name":
			out.Name = string(in.String())
		case "DisplayName":
			out.DisplayName = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "ImagePath":
			out.ImagePath = string(in.String())
		case "ImageExecutable":
			out.ImageExecutable = string(in.String())
		case "ImageExecutableOwner":
			out.ImageExecutableOwner = string(in.String())
		case "ImageExecutableDACL":
			if in.IsNull() {
				in.Skip()
				out.ImageExecutableDACL = nil
			} else {
				out.ImageExecutableDACL = in.Bytes()
			}
		case "Start":
			out.Start = int(in.Int())
		case "Type":
			out.Type = int(in.Int())
		case "Account":
			out.Account = string(in.String())
		case "AccountSID":
			out.AccountSID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector2(out *jwriter.Writer, in Service) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.RegistryDACL) != 0 {
		const prefix string = ",\"RegistryDACL\":"
		first = false
		out.RawString(prefix[1:])
		out.Base64Bytes(in.RegistryDACL)
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.DisplayName != "" {
		const prefix string = ",\"DisplayName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DisplayName))
	}
	if in.Description != "" {
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ImagePath != "" {
		const prefix string = ",\"ImagePath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImagePath))
	}
	if in.ImageExecutable != "" {
		const prefix string = ",\"ImageExecutable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImageExecutable))
	}
	if in.ImageExecutableOwner != "" {
		const prefix string = ",\"ImageExecutableOwner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImageExecutableOwner))
	}
	if len(in.ImageExecutableDACL) != 0 {
		const prefix string = ",\"ImageExecutableDACL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.ImageExecutableDACL)
	}
	if in.Start != 0 {
		const prefix string = ",\"Start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Start))
	}
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.Account != "" {
		const prefix string = ",\"Account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Account))
	}
	if in.AccountSID != "" {
		const prefix string = ",\"AccountSID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountSID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Service) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Service) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Service) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Service) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector2(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector3(in *jlexer.Lexer, out *NetworkInterfaceInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "MACAddress":
			out.MACAddress = string(in.String())
		case "Flags":
			out.Flags = net.Flags(in.Uint())
		case "Addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]string, 0, 4)
					} else {
						out.Addresses = []string{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Addresses = append(out.Addresses, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector3(out *jwriter.Writer, in NetworkInterfaceInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"MACAddress\":"
		out.RawString(prefix)
		out.String(string(in.MACAddress))
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Uint(uint(in.Flags))
	}
	{
		const prefix string = ",\"Addresses\":"
		out.RawString(prefix)
		if in.Addresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Addresses {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NetworkInterfaceInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NetworkInterfaceInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NetworkInterfaceInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NetworkInterfaceInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector3(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector4(in *jlexer.Lexer, out *NetworkInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "InternetConnectivity":
			out.InternetConnectivity = string(in.String())
		case "NetworkInterfaces":
			if in.IsNull() {
				in.Skip()
				out.NetworkInterfaces = nil
			} else {
				in.Delim('[')
				if out.NetworkInterfaces == nil {
					if !in.IsDelim(']') {
						out.NetworkInterfaces = make([]NetworkInterfaceInfo, 0, 1)
					} else {
						out.NetworkInterfaces = []NetworkInterfaceInfo{}
					}
				} else {
					out.NetworkInterfaces = (out.NetworkInterfaces)[:0]
				}
				for !in.IsDelim(']') {
					var v13 NetworkInterfaceInfo
					(v13).UnmarshalEasyJSON(in)
					out.NetworkInterfaces = append(out.NetworkInterfaces, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector4(out *jwriter.Writer, in NetworkInformation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"InternetConnectivity\":"
		out.RawString(prefix[1:])
		out.String(string(in.InternetConnectivity))
	}
	{
		const prefix string = ",\"NetworkInterfaces\":"
		out.RawString(prefix)
		if in.NetworkInterfaces == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.NetworkInterfaces {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NetworkInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NetworkInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NetworkInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NetworkInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector4(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector5(in *jlexer.Lexer, out *Member) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "SID":
			out.SID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector5(out *jwriter.Writer, in Member) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"SID\":"
		out.RawString(prefix)
		out.String(string(in.SID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Member) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Member) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Member) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Member) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector5(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector6(in *jlexer.Lexer, out *Machine) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "LocalSID":
			out.LocalSID = string(in.String())
		case "Domain":
			out.Domain = string(in.String())
		case "ComputerDomainSID":
			out.ComputerDomainSID = string(in.String())
		case "IsDomainJoined":
			out.IsDomainJoined = bool(in.Bool())
		case "Architecture":
			out.Architecture = string(in.String())
		case "NumberOfProcessors":
			out.NumberOfProcessors = int(in.Int())
		case "ProductName":
			out.ProductName = string(in.String())
		case "EditionID":
			out.EditionID = string(in.String())
		case "ReleaseID":
			out.ReleaseID = string(in.String())
		case "BuildBranch":
			out.BuildBranch = string(in.String())
		case "MajorVersionNumber":
			out.MajorVersionNumber = uint64(in.Uint64())
		case "Version":
			out.Version = string(in.String())
		case "BuildNumber":
			out.BuildNumber = string(in.String())
		case "DefaultUsername":
			out.DefaultUsername = string(in.String())
		case "DefaultDomain":
			out.DefaultDomain = string(in.String())
		case "AltDefaultUsername":
			out.AltDefaultUsername = string(in.String())
		case "AltDefaultDomain":
			out.AltDefaultDomain = string(in.String())
		case "AppCache":
			if in.IsNull() {
				in.Skip()
				out.AppCache = nil
			} else {
				in.Delim('[')
				if out.AppCache == nil {
					if !in.IsDelim(']') {
						out.AppCache = make([][]uint8, 0, 2)
					} else {
						out.AppCache = [][]uint8{}
					}
				} else {
					out.AppCache = (out.AppCache)[:0]
				}
				for !in.IsDelim(']') {
					var v16 []uint8
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						v16 = in.Bytes()
					}
					out.AppCache = append(out.AppCache, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SCCMLastValidMP":
			out.SCCMLastValidMP = string(in.String())
		case "UACConsentPromptBehaviorAdmin":
			out.UACConsentPromptBehaviorAdmin = uint64(in.Uint64())
		case "UACEnableLUA":
			out.UACEnableLUA = uint64(in.Uint64())
		case "UACLocalAccountTokenFilterPolicy":
			out.UACLocalAccountTokenFilterPolicy = uint64(in.Uint64())
		case "UACFilterAdministratorToken":
			out.UACFilterAdministratorToken = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector6(out *jwriter.Writer, in Machine) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.LocalSID != "" {
		const prefix string = ",\"LocalSID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocalSID))
	}
	if in.Domain != "" {
		const prefix string = ",\"Domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if in.ComputerDomainSID != "" {
		const prefix string = ",\"ComputerDomainSID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ComputerDomainSID))
	}
	if in.IsDomainJoined {
		const prefix string = ",\"IsDomainJoined\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsDomainJoined))
	}
	if in.Architecture != "" {
		const prefix string = ",\"Architecture\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Architecture))
	}
	if in.NumberOfProcessors != 0 {
		const prefix string = ",\"NumberOfProcessors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NumberOfProcessors))
	}
	if in.ProductName != "" {
		const prefix string = ",\"ProductName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProductName))
	}
	if in.EditionID != "" {
		const prefix string = ",\"EditionID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EditionID))
	}
	if in.ReleaseID != "" {
		const prefix string = ",\"ReleaseID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReleaseID))
	}
	if in.BuildBranch != "" {
		const prefix string = ",\"BuildBranch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BuildBranch))
	}
	if in.MajorVersionNumber != 0 {
		const prefix string = ",\"MajorVersionNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.MajorVersionNumber))
	}
	if in.Version != "" {
		const prefix string = ",\"Version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.BuildNumber != "" {
		const prefix string = ",\"BuildNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BuildNumber))
	}
	if in.DefaultUsername != "" {
		const prefix string = ",\"DefaultUsername\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultUsername))
	}
	if in.DefaultDomain != "" {
		const prefix string = ",\"DefaultDomain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultDomain))
	}
	if in.AltDefaultUsername != "" {
		const prefix string = ",\"AltDefaultUsername\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AltDefaultUsername))
	}
	if in.AltDefaultDomain != "" {
		const prefix string = ",\"AltDefaultDomain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AltDefaultDomain))
	}
	if len(in.AppCache) != 0 {
		const prefix string = ",\"AppCache\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.AppCache {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.Base64Bytes(v19)
			}
			out.RawByte(']')
		}
	}
	if in.SCCMLastValidMP != "" {
		const prefix string = ",\"SCCMLastValidMP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SCCMLastValidMP))
	}
	if in.UACConsentPromptBehaviorAdmin != 0 {
		const prefix string = ",\"UACConsentPromptBehaviorAdmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UACConsentPromptBehaviorAdmin))
	}
	if in.UACEnableLUA != 0 {
		const prefix string = ",\"UACEnableLUA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UACEnableLUA))
	}
	if in.UACLocalAccountTokenFilterPolicy != 0 {
		const prefix string = ",\"UACLocalAccountTokenFilterPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UACLocalAccountTokenFilterPolicy))
	}
	if in.UACFilterAdministratorToken != 0 {
		const prefix string = ",\"UACFilterAdministratorToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UACFilterAdministratorToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Machine) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Machine) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Machine) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Machine) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector6(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector7(in *jlexer.Lexer, out *LoginPopularity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Day":
			if in.IsNull() {
				in.Skip()
				out.Day = nil
			} else {
				in.Delim('[')
				if out.Day == nil {
					if !in.IsDelim(']') {
						out.Day = make([]LoginCount, 0, 1)
					} else {
						out.Day = []LoginCount{}
					}
				} else {
					out.Day = (out.Day)[:0]
				}
				for !in.IsDelim(']') {
					var v22 LoginCount
					(v22).UnmarshalEasyJSON(in)
					out.Day = append(out.Day, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Week":
			if in.IsNull() {
				in.Skip()
				out.Week = nil
			} else {
				in.Delim('[')
				if out.Week == nil {
					if !in.IsDelim(']') {
						out.Week = make([]LoginCount, 0, 1)
					} else {
						out.Week = []LoginCount{}
					}
				} else {
					out.Week = (out.Week)[:0]
				}
				for !in.IsDelim(']') {
					var v23 LoginCount
					(v23).UnmarshalEasyJSON(in)
					out.Week = append(out.Week, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Month":
			if in.IsNull() {
				in.Skip()
				out.Month = nil
			} else {
				in.Delim('[')
				if out.Month == nil {
					if !in.IsDelim(']') {
						out.Month = make([]LoginCount, 0, 1)
					} else {
						out.Month = []LoginCount{}
					}
				} else {
					out.Month = (out.Month)[:0]
				}
				for !in.IsDelim(']') {
					var v24 LoginCount
					(v24).UnmarshalEasyJSON(in)
					out.Month = append(out.Month, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector7(out *jwriter.Writer, in LoginPopularity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Day\":"
		out.RawString(prefix[1:])
		if in.Day == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Day {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Week\":"
		out.RawString(prefix)
		if in.Week == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Week {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Month\":"
		out.RawString(prefix)
		if in.Month == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Month {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginPopularity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginPopularity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginPopularity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginPopularity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector7(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector8(in *jlexer.Lexer, out *LoginCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "SID":
			out.SID = string(in.String())
		case "Count":
			out.Count = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector8(out *jwriter.Writer, in LoginCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"SID\":"
		out.RawString(prefix)
		out.String(string(in.SID))
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector8(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector9(in *jlexer.Lexer, out *Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Collector":
			out.Collector = string(in.String())
		case "BuildDate":
			out.BuildDate = string(in.String())
		case "Commit":
			out.Commit = string(in.String())
		case "Collected":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Collected).UnmarshalJSON(data))
			}
		case "Machine":
			(out.Machine).UnmarshalEasyJSON(in)
		case "Hardware":
			easyjson6a975c40DecodeGithubComLkarlslundGoWin64apiShared(in, &out.Hardware)
		case "Network":
			(out.Network).UnmarshalEasyJSON(in)
		case "OperatingSystem":
			easyjson6a975c40DecodeGithubComLkarlslundGoWin64apiShared1(in, &out.OperatingSystem)
		case "Memory":
			easyjson6a975c40DecodeGithubComLkarlslundGoWin64apiShared2(in, &out.Memory)
		case "Availability":
			(out.Availability).UnmarshalEasyJSON(in)
		case "LoginPopularity":
			(out.LoginPopularity).UnmarshalEasyJSON(in)
		case "Users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make(Users, 0, 0)
					} else {
						out.Users = Users{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v31 User
					(v31).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make(Groups, 0, 0)
					} else {
						out.Groups = Groups{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v32 Group
					(v32).UnmarshalEasyJSON(in)
					out.Groups = append(out.Groups, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Shares":
			if in.IsNull() {
				in.Skip()
				out.Shares = nil
			} else {
				in.Delim('[')
				if out.Shares == nil {
					if !in.IsDelim(']') {
						out.Shares = make(Shares, 0, 0)
					} else {
						out.Shares = Shares{}
					}
				} else {
					out.Shares = (out.Shares)[:0]
				}
				for !in.IsDelim(']') {
					var v33 Share
					(v33).UnmarshalEasyJSON(in)
					out.Shares = append(out.Shares, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Services":
			if in.IsNull() {
				in.Skip()
				out.Services = nil
			} else {
				in.Delim('[')
				if out.Services == nil {
					if !in.IsDelim(']') {
						out.Services = make(Services, 0, 0)
					} else {
						out.Services = Services{}
					}
				} else {
					out.Services = (out.Services)[:0]
				}
				for !in.IsDelim(']') {
					var v34 Service
					(v34).UnmarshalEasyJSON(in)
					out.Services = append(out.Services, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Software":
			if in.IsNull() {
				in.Skip()
				out.Software = nil
			} else {
				in.Delim('[')
				if out.Software == nil {
					if !in.IsDelim(']') {
						out.Software = make([]shared.Software, 0, 0)
					} else {
						out.Software = []shared.Software{}
					}
				} else {
					out.Software = (out.Software)[:0]
				}
				for !in.IsDelim(']') {
					var v35 shared.Software
					easyjson6a975c40DecodeGithubComLkarlslundGoWin64apiShared3(in, &v35)
					out.Software = append(out.Software, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector9(out *jwriter.Writer, in Info) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Collector\":"
		out.RawString(prefix[1:])
		out.String(string(in.Collector))
	}
	{
		const prefix string = ",\"BuildDate\":"
		out.RawString(prefix)
		out.String(string(in.BuildDate))
	}
	{
		const prefix string = ",\"Commit\":"
		out.RawString(prefix)
		out.String(string(in.Commit))
	}
	{
		const prefix string = ",\"Collected\":"
		out.RawString(prefix)
		out.Raw((in.Collected).MarshalJSON())
	}
	if true {
		const prefix string = ",\"Machine\":"
		out.RawString(prefix)
		(in.Machine).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Hardware\":"
		out.RawString(prefix)
		easyjson6a975c40EncodeGithubComLkarlslundGoWin64apiShared(out, in.Hardware)
	}
	{
		const prefix string = ",\"Network\":"
		out.RawString(prefix)
		(in.Network).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"OperatingSystem\":"
		out.RawString(prefix)
		easyjson6a975c40EncodeGithubComLkarlslundGoWin64apiShared1(out, in.OperatingSystem)
	}
	{
		const prefix string = ",\"Memory\":"
		out.RawString(prefix)
		easyjson6a975c40EncodeGithubComLkarlslundGoWin64apiShared2(out, in.Memory)
	}
	{
		const prefix string = ",\"Availability\":"
		out.RawString(prefix)
		(in.Availability).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"LoginPopularity\":"
		out.RawString(prefix)
		(in.LoginPopularity).MarshalEasyJSON(out)
	}
	if len(in.Users) != 0 {
		const prefix string = ",\"Users\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v36, v37 := range in.Users {
				if v36 > 0 {
					out.RawByte(',')
				}
				(v37).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"Groups\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v38, v39 := range in.Groups {
				if v38 > 0 {
					out.RawByte(',')
				}
				(v39).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Shares) != 0 {
		const prefix string = ",\"Shares\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v40, v41 := range in.Shares {
				if v40 > 0 {
					out.RawByte(',')
				}
				(v41).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Services) != 0 {
		const prefix string = ",\"Services\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v42, v43 := range in.Services {
				if v42 > 0 {
					out.RawByte(',')
				}
				(v43).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Software) != 0 {
		const prefix string = ",\"Software\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v44, v45 := range in.Software {
				if v44 > 0 {
					out.RawByte(',')
				}
				easyjson6a975c40EncodeGithubComLkarlslundGoWin64apiShared3(out, v45)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Info) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Info) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Info) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Info) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector9(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundGoWin64apiShared3(in *jlexer.Lexer, out *shared.Software) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "displayName":
			out.DisplayName = string(in.String())
		case "displayVersion":
			out.DisplayVersion = string(in.String())
		case "arch":
			out.Arch = string(in.String())
		case "publisher":
			out.Publisher = string(in.String())
		case "installDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.InstallDate).UnmarshalJSON(data))
			}
		case "estimatedSize":
			out.EstimatedSize = uint64(in.Uint64())
		case "Contact":
			out.Contact = string(in.String())
		case "HelpLink":
			out.HelpLink = string(in.String())
		case "InstallSource":
			out.InstallSource = string(in.String())
		case "InstallLocation":
			out.InstallLocation = string(in.String())
		case "UninstallString":
			out.UninstallString = string(in.String())
		case "VersionMajor":
			out.VersionMajor = uint64(in.Uint64())
		case "VersionMinor":
			out.VersionMinor = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundGoWin64apiShared3(out *jwriter.Writer, in shared.Software) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"displayName\":"
		out.RawString(prefix[1:])
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"displayVersion\":"
		out.RawString(prefix)
		out.String(string(in.DisplayVersion))
	}
	{
		const prefix string = ",\"arch\":"
		out.RawString(prefix)
		out.String(string(in.Arch))
	}
	{
		const prefix string = ",\"publisher\":"
		out.RawString(prefix)
		out.String(string(in.Publisher))
	}
	{
		const prefix string = ",\"installDate\":"
		out.RawString(prefix)
		out.Raw((in.InstallDate).MarshalJSON())
	}
	{
		const prefix string = ",\"estimatedSize\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.EstimatedSize))
	}
	{
		const prefix string = ",\"Contact\":"
		out.RawString(prefix)
		out.String(string(in.Contact))
	}
	{
		const prefix string = ",\"HelpLink\":"
		out.RawString(prefix)
		out.String(string(in.HelpLink))
	}
	{
		const prefix string = ",\"InstallSource\":"
		out.RawString(prefix)
		out.String(string(in.InstallSource))
	}
	{
		const prefix string = ",\"InstallLocation\":"
		out.RawString(prefix)
		out.String(string(in.InstallLocation))
	}
	{
		const prefix string = ",\"UninstallString\":"
		out.RawString(prefix)
		out.String(string(in.UninstallString))
	}
	{
		const prefix string = ",\"VersionMajor\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.VersionMajor))
	}
	{
		const prefix string = ",\"VersionMinor\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.VersionMinor))
	}
	out.RawByte('}')
}
func easyjson6a975c40DecodeGithubComLkarlslundGoWin64apiShared2(in *jlexer.Lexer, out *shared.Memory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalRAM":
			out.TotalRAM = uint64(in.Uint64())
		case "usableRAM":
			out.UsableRAM = uint64(in.Uint64())
		case "freeRAM":
			out.FreeRAM = uint64(in.Uint64())
		case "totalPF":
			out.TotalPageFile = uint64(in.Uint64())
		case "freePF":
			out.FreePageFile = uint64(in.Uint64())
		case "managedPF":
			out.SystemManagedPageFile = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundGoWin64apiShared2(out *jwriter.Writer, in shared.Memory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalRAM\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TotalRAM))
	}
	{
		const prefix string = ",\"usableRAM\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UsableRAM))
	}
	{
		const prefix string = ",\"freeRAM\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.FreeRAM))
	}
	{
		const prefix string = ",\"totalPF\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TotalPageFile))
	}
	{
		const prefix string = ",\"freePF\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.FreePageFile))
	}
	{
		const prefix string = ",\"managedPF\":"
		out.RawString(prefix)
		out.Bool(bool(in.SystemManagedPageFile))
	}
	out.RawByte('}')
}
func easyjson6a975c40DecodeGithubComLkarlslundGoWin64apiShared1(in *jlexer.Lexer, out *shared.OperatingSystem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FriendlyName":
			out.FriendlyName = string(in.String())
		case "Version":
			out.Version = string(in.String())
		case "Architecture":
			out.Architecture = string(in.String())
		case "Language":
			out.LanguageCode = uint16(in.Uint16())
		case "LastBootUpTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastBootUpTime).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundGoWin64apiShared1(out *jwriter.Writer, in shared.OperatingSystem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FriendlyName\":"
		out.RawString(prefix[1:])
		out.String(string(in.FriendlyName))
	}
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"Architecture\":"
		out.RawString(prefix)
		out.String(string(in.Architecture))
	}
	{
		const prefix string = ",\"Language\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.LanguageCode))
	}
	{
		const prefix string = ",\"LastBootUpTime\":"
		out.RawString(prefix)
		out.Raw((in.LastBootUpTime).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson6a975c40DecodeGithubComLkarlslundGoWin64apiShared(in *jlexer.Lexer, out *shared.Hardware) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "HardwareUUID":
			out.HardwareUUID = string(in.String())
		case "Manufacturer":
			out.Manufacturer = string(in.String())
		case "Model":
			out.Model = string(in.String())
		case "ServiceTag":
			out.ServiceTag = string(in.String())
		case "biosVersion":
			out.BIOSVersion = string(in.String())
		case "biosManufacturer":
			out.BIOSManufacturer = string(in.String())
		case "biosReleaseDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BIOSReleaseDate).UnmarshalJSON(data))
			}
		case "isUsingUEFI":
			out.IsUsingUEFI = bool(in.Bool())
		case "safebootEnabled":
			out.SecureBootEnabled = bool(in.Bool())
		case "cpus":
			if in.IsNull() {
				in.Skip()
				out.CPU = nil
			} else {
				in.Delim('[')
				if out.CPU == nil {
					if !in.IsDelim(']') {
						out.CPU = make([]shared.CPU, 0, 2)
					} else {
						out.CPU = []shared.CPU{}
					}
				} else {
					out.CPU = (out.CPU)[:0]
				}
				for !in.IsDelim(']') {
					var v46 shared.CPU
					easyjson6a975c40DecodeGithubComLkarlslundGoWin64apiShared4(in, &v46)
					out.CPU = append(out.CPU, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "memoryDIMMs":
			if in.IsNull() {
				in.Skip()
				out.Memory = nil
			} else {
				in.Delim('[')
				if out.Memory == nil {
					if !in.IsDelim(']') {
						out.Memory = make([]shared.MemoryDIMM, 0, 2)
					} else {
						out.Memory = []shared.MemoryDIMM{}
					}
				} else {
					out.Memory = (out.Memory)[:0]
				}
				for !in.IsDelim(']') {
					var v47 shared.MemoryDIMM
					easyjson6a975c40DecodeGithubComLkarlslundGoWin64apiShared5(in, &v47)
					out.Memory = append(out.Memory, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundGoWin64apiShared(out *jwriter.Writer, in shared.Hardware) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"HardwareUUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.HardwareUUID))
	}
	{
		const prefix string = ",\"Manufacturer\":"
		out.RawString(prefix)
		out.String(string(in.Manufacturer))
	}
	{
		const prefix string = ",\"Model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	{
		const prefix string = ",\"ServiceTag\":"
		out.RawString(prefix)
		out.String(string(in.ServiceTag))
	}
	{
		const prefix string = ",\"biosVersion\":"
		out.RawString(prefix)
		out.String(string(in.BIOSVersion))
	}
	{
		const prefix string = ",\"biosManufacturer\":"
		out.RawString(prefix)
		out.String(string(in.BIOSManufacturer))
	}
	{
		const prefix string = ",\"biosReleaseDate\":"
		out.RawString(prefix)
		out.Raw((in.BIOSReleaseDate).MarshalJSON())
	}
	{
		const prefix string = ",\"isUsingUEFI\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsUsingUEFI))
	}
	{
		const prefix string = ",\"safebootEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.SecureBootEnabled))
	}
	{
		const prefix string = ",\"cpus\":"
		out.RawString(prefix)
		if in.CPU == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.CPU {
				if v48 > 0 {
					out.RawByte(',')
				}
				easyjson6a975c40EncodeGithubComLkarlslundGoWin64apiShared4(out, v49)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"memoryDIMMs\":"
		out.RawString(prefix)
		if in.Memory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Memory {
				if v50 > 0 {
					out.RawByte(',')
				}
				easyjson6a975c40EncodeGithubComLkarlslundGoWin64apiShared5(out, v51)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6a975c40DecodeGithubComLkarlslundGoWin64apiShared5(in *jlexer.Lexer, out *shared.MemoryDIMM) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MemoryType":
			out.MType = string(in.String())
		case "Size":
			out.Size = uint64(in.Uint64())
		case "Speed":
			out.Speed = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundGoWin64apiShared5(out *jwriter.Writer, in shared.MemoryDIMM) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MemoryType\":"
		out.RawString(prefix[1:])
		out.String(string(in.MType))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Size))
	}
	{
		const prefix string = ",\"Speed\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Speed))
	}
	out.RawByte('}')
}
func easyjson6a975c40DecodeGithubComLkarlslundGoWin64apiShared4(in *jlexer.Lexer, out *shared.CPU) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FriendlyName":
			out.FriendlyName = string(in.String())
		case "cores":
			out.NumberOfCores = uint8(in.Uint8())
		case "logical":
			out.NumberOfLogical = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundGoWin64apiShared4(out *jwriter.Writer, in shared.CPU) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FriendlyName\":"
		out.RawString(prefix[1:])
		out.String(string(in.FriendlyName))
	}
	{
		const prefix string = ",\"cores\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.NumberOfCores))
	}
	{
		const prefix string = ",\"logical\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.NumberOfLogical))
	}
	out.RawByte('}')
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector10(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "SID":
			out.SID = string(in.String())
		case "Comment":
			out.Comment = string(in.String())
		case "Members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]Member, 0, 2)
					} else {
						out.Members = []Member{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v52 Member
					(v52).UnmarshalEasyJSON(in)
					out.Members = append(out.Members, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector10(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"SID\":"
		out.RawString(prefix)
		out.String(string(in.SID))
	}
	{
		const prefix string = ",\"Comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"Members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Members {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Group) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Group) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Group) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Group) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector10(l, v)
}
func easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector11(in *jlexer.Lexer, out *Availability) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Day":
			out.Day = uint64(in.Uint64())
		case "Week":
			out.Week = uint64(in.Uint64())
		case "Month":
			out.Month = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector11(out *jwriter.Writer, in Availability) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Day != 0 {
		const prefix string = ",\"Day\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Day))
	}
	if in.Week != 0 {
		const prefix string = ",\"Week\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Week))
	}
	if in.Month != 0 {
		const prefix string = ",\"Month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Month))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Availability) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Availability) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComLkarlslundAdalancheModulesCollector11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Availability) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Availability) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComLkarlslundAdalancheModulesCollector11(l, v)
}
